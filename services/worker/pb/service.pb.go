// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SpecRequest struct {
	Specs                string   `protobuf:"bytes,1,opt,name=specs,proto3" json:"specs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpecRequest) Reset()         { *m = SpecRequest{} }
func (m *SpecRequest) String() string { return proto.CompactTextString(m) }
func (*SpecRequest) ProtoMessage()    {}
func (*SpecRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *SpecRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpecRequest.Unmarshal(m, b)
}
func (m *SpecRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpecRequest.Marshal(b, m, deterministic)
}
func (m *SpecRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecRequest.Merge(m, src)
}
func (m *SpecRequest) XXX_Size() int {
	return xxx_messageInfo_SpecRequest.Size(m)
}
func (m *SpecRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SpecRequest proto.InternalMessageInfo

func (m *SpecRequest) GetSpecs() string {
	if m != nil {
		return m.Specs
	}
	return ""
}

type SpecResponse struct {
	CPUmodel             string   `protobuf:"bytes,1,opt,name=CPUmodel,proto3" json:"CPUmodel,omitempty"`
	CPUmhz               float64  `protobuf:"fixed64,2,opt,name=CPUmhz,proto3" json:"CPUmhz,omitempty"`
	CPUcore              uint64   `protobuf:"varint,3,opt,name=CPUcore,proto3" json:"CPUcore,omitempty"`
	Memory               uint64   `protobuf:"varint,4,opt,name=Memory,proto3" json:"Memory,omitempty"`
	MemoryFree           uint64   `protobuf:"varint,5,opt,name=MemoryFree,proto3" json:"MemoryFree,omitempty"`
	Disk                 uint64   `protobuf:"varint,6,opt,name=Disk,proto3" json:"Disk,omitempty"`
	DiskFree             uint64   `protobuf:"varint,7,opt,name=DiskFree,proto3" json:"DiskFree,omitempty"`
	OS                   string   `protobuf:"bytes,8,opt,name=OS,proto3" json:"OS,omitempty"`
	Platform             string   `protobuf:"bytes,9,opt,name=Platform,proto3" json:"Platform,omitempty"`
	KernelArch           string   `protobuf:"bytes,10,opt,name=KernelArch,proto3" json:"KernelArch,omitempty"`
	Hostname             string   `protobuf:"bytes,11,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	Uptime               uint64   `protobuf:"varint,12,opt,name=Uptime,proto3" json:"Uptime,omitempty"`
	BootTime             uint64   `protobuf:"varint,13,opt,name=BootTime,proto3" json:"BootTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpecResponse) Reset()         { *m = SpecResponse{} }
func (m *SpecResponse) String() string { return proto.CompactTextString(m) }
func (*SpecResponse) ProtoMessage()    {}
func (*SpecResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *SpecResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpecResponse.Unmarshal(m, b)
}
func (m *SpecResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpecResponse.Marshal(b, m, deterministic)
}
func (m *SpecResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecResponse.Merge(m, src)
}
func (m *SpecResponse) XXX_Size() int {
	return xxx_messageInfo_SpecResponse.Size(m)
}
func (m *SpecResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SpecResponse proto.InternalMessageInfo

func (m *SpecResponse) GetCPUmodel() string {
	if m != nil {
		return m.CPUmodel
	}
	return ""
}

func (m *SpecResponse) GetCPUmhz() float64 {
	if m != nil {
		return m.CPUmhz
	}
	return 0
}

func (m *SpecResponse) GetCPUcore() uint64 {
	if m != nil {
		return m.CPUcore
	}
	return 0
}

func (m *SpecResponse) GetMemory() uint64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *SpecResponse) GetMemoryFree() uint64 {
	if m != nil {
		return m.MemoryFree
	}
	return 0
}

func (m *SpecResponse) GetDisk() uint64 {
	if m != nil {
		return m.Disk
	}
	return 0
}

func (m *SpecResponse) GetDiskFree() uint64 {
	if m != nil {
		return m.DiskFree
	}
	return 0
}

func (m *SpecResponse) GetOS() string {
	if m != nil {
		return m.OS
	}
	return ""
}

func (m *SpecResponse) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *SpecResponse) GetKernelArch() string {
	if m != nil {
		return m.KernelArch
	}
	return ""
}

func (m *SpecResponse) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *SpecResponse) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *SpecResponse) GetBootTime() uint64 {
	if m != nil {
		return m.BootTime
	}
	return 0
}

func init() {
	proto.RegisterType((*SpecRequest)(nil), "pb.SpecRequest")
	proto.RegisterType((*SpecResponse)(nil), "pb.SpecResponse")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xdd, 0x4a, 0xc3, 0x40,
	0x10, 0x85, 0x49, 0xec, 0xef, 0xb4, 0x55, 0x59, 0x44, 0x86, 0x5e, 0x48, 0xa9, 0x37, 0xbd, 0x2a,
	0xa2, 0x0f, 0x20, 0x5a, 0x11, 0x41, 0x4a, 0x4b, 0x62, 0x1e, 0x20, 0x59, 0x47, 0x12, 0x4c, 0xb2,
	0xeb, 0xee, 0x2a, 0xe8, 0xd3, 0xfa, 0x28, 0xb2, 0xbb, 0x49, 0xcd, 0x55, 0xf6, 0x3b, 0x67, 0x0e,
	0x99, 0xe1, 0xc0, 0x4c, 0x93, 0xfa, 0x2a, 0x38, 0xad, 0xa5, 0x12, 0x46, 0xb0, 0x50, 0x66, 0xcb,
	0x4b, 0x98, 0xc4, 0x92, 0x78, 0x44, 0x1f, 0x9f, 0xa4, 0x0d, 0x3b, 0x83, 0xbe, 0x96, 0xc4, 0x35,
	0x06, 0x8b, 0x60, 0x35, 0x8e, 0x3c, 0x2c, 0x7f, 0x43, 0x98, 0xfa, 0x29, 0x2d, 0x45, 0xad, 0x89,
	0xcd, 0x61, 0xb4, 0xd9, 0x27, 0x95, 0x78, 0xa5, 0xb2, 0x99, 0x3c, 0x30, 0x3b, 0x87, 0x81, 0x7d,
	0xe7, 0x3f, 0x18, 0x2e, 0x82, 0x55, 0x10, 0x35, 0xc4, 0x10, 0x86, 0x9b, 0x7d, 0xc2, 0x85, 0x22,
	0x3c, 0x5a, 0x04, 0xab, 0x5e, 0xd4, 0xa2, 0x4d, 0x6c, 0xa9, 0x12, 0xea, 0x1b, 0x7b, 0xce, 0x68,
	0x88, 0x5d, 0x00, 0xf8, 0xd7, 0xa3, 0x22, 0xc2, 0xbe, 0xf3, 0x3a, 0x0a, 0x63, 0xd0, 0x7b, 0x28,
	0xf4, 0x3b, 0x0e, 0x9c, 0xe3, 0xde, 0x76, 0x33, 0xfb, 0x75, 0x89, 0xa1, 0xd3, 0x0f, 0xcc, 0x8e,
	0x21, 0xdc, 0xc5, 0x38, 0x72, 0xfb, 0x86, 0xbb, 0xd8, 0xce, 0xee, 0xcb, 0xd4, 0xbc, 0x09, 0x55,
	0xe1, 0xd8, 0x5f, 0xd1, 0xb2, 0xfd, 0xf7, 0x33, 0xa9, 0x9a, 0xca, 0x3b, 0xc5, 0x73, 0x04, 0xe7,
	0x76, 0x14, 0x9b, 0x7d, 0x12, 0xda, 0xd4, 0x69, 0x45, 0x38, 0xf1, 0xd9, 0x96, 0xed, 0x3d, 0x89,
	0x34, 0x45, 0x45, 0x38, 0xf5, 0xf7, 0x78, 0xb2, 0x99, 0x7b, 0x21, 0xcc, 0x8b, 0x75, 0x66, 0x7e,
	0xb7, 0x96, 0xaf, 0x6f, 0x7d, 0x0f, 0xb1, 0x2f, 0x88, 0x5d, 0xc1, 0x64, 0x9b, 0xf2, 0xbc, 0xa8,
	0xc9, 0xaa, 0xec, 0x64, 0x2d, 0xb3, 0x75, 0xa7, 0xa7, 0xf9, 0xe9, 0xbf, 0xe0, 0x2b, 0xc9, 0x06,
	0xae, 0xd3, 0x9b, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa9, 0xb4, 0x1a, 0x3c, 0xe4, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SpecServiceClient is the client API for SpecService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpecServiceClient interface {
	MachineSpec(ctx context.Context, in *SpecRequest, opts ...grpc.CallOption) (*SpecResponse, error)
}

type specServiceClient struct {
	cc *grpc.ClientConn
}

func NewSpecServiceClient(cc *grpc.ClientConn) SpecServiceClient {
	return &specServiceClient{cc}
}

func (c *specServiceClient) MachineSpec(ctx context.Context, in *SpecRequest, opts ...grpc.CallOption) (*SpecResponse, error) {
	out := new(SpecResponse)
	err := c.cc.Invoke(ctx, "/pb.SpecService/MachineSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpecServiceServer is the server API for SpecService service.
type SpecServiceServer interface {
	MachineSpec(context.Context, *SpecRequest) (*SpecResponse, error)
}

// UnimplementedSpecServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSpecServiceServer struct {
}

func (*UnimplementedSpecServiceServer) MachineSpec(ctx context.Context, req *SpecRequest) (*SpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MachineSpec not implemented")
}

func RegisterSpecServiceServer(s *grpc.Server, srv SpecServiceServer) {
	s.RegisterService(&_SpecService_serviceDesc, srv)
}

func _SpecService_MachineSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServiceServer).MachineSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SpecService/MachineSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServiceServer).MachineSpec(ctx, req.(*SpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SpecService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SpecService",
	HandlerType: (*SpecServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MachineSpec",
			Handler:    _SpecService_MachineSpec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
